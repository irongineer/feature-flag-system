name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22.x'
  AWS_REGION: 'us-east-1'

jobs:
  # Â§âÊõ¥Ê§úÂá∫
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      packages-changed: ${{ steps.changes.outputs.packages }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
      docs-changed: ${{ steps.changes.outputs.docs }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          packages:
            - 'packages/**'
            - 'package.json'
            - 'package-lock.json'
          infrastructure:
            - 'infrastructure/**'
          docs:
            - 'docs/**'
            - '*.md'

  # „Éá„Éó„É≠„Ç§Ââç„ÅÆ„ÉÜ„Çπ„ÉàÂÆüË°å
  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run all tests
      run: npm test
    
    - name: Run performance tests
      run: npm run poc:performance

  # „Éë„ÉÉ„Ç±„Éº„Ç∏„Éì„É´„Éâ„Å®ÊàêÊûúÁâ©‰ΩúÊàê
  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.packages-changed == 'true'
    
    strategy:
      matrix:
        package: [core, sdk, api, cli]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build ${{ matrix.package }}
      run: npm run build:${{ matrix.package }}
    
    - name: Create deployment package
      working-directory: packages/${{ matrix.package }}
      run: |
        mkdir -p ../../dist/${{ matrix.package }}
        cp -r dist/* ../../dist/${{ matrix.package }}/
        cp package.json ../../dist/${{ matrix.package }}/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.package }}-build
        path: dist/${{ matrix.package }}
        retention-days: 30

  # DevelopmentÁí∞Â¢É„Éá„Éó„É≠„Ç§
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [detect-changes, pre-deployment-tests, build-packages]
    if: |
      always() && 
      (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped') &&
      (needs.build-packages.result == 'success' || needs.build-packages.result == 'skipped') &&
      (github.ref == 'refs/heads/main' || inputs.environment == 'development')
    environment:
      name: development
      url: https://dev-api.feature-flags.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download build artifacts
      if: needs.detect-changes.outputs.packages-changed == 'true'
      uses: actions/download-artifact@v4
      with:
        path: dist/
    
    - name: Install CDK dependencies
      working-directory: ./infrastructure
      run: npm ci
    
    - name: CDK Bootstrap (if needed)
      working-directory: ./infrastructure
      run: npx cdk bootstrap --context environment=development
    
    - name: CDK Deploy to Development
      working-directory: ./infrastructure
      run: |
        npx cdk deploy --all \
          --context environment=development \
          --require-approval never \
          --outputs-file cdk-outputs-dev.json
    
    - name: Run smoke tests
      run: npm run test:smoke
      env:
        API_ENDPOINT: ${{ steps.deploy.outputs.api-endpoint }}
        ENVIRONMENT: development
    
    - name: Update deployment status
      run: |
        echo "‚úÖ Development deployment completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "üîó API Endpoint: https://dev-api.feature-flags.example.com" >> $GITHUB_STEP_SUMMARY

  # StagingÁí∞Â¢É„Éá„Éó„É≠„Ç§
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-development]
    if: |
      success() && 
      (startsWith(github.ref, 'refs/tags/') || inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-api.feature-flags.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
    
    - name: Install CDK dependencies
      working-directory: ./infrastructure
      run: npm ci
    
    - name: CDK Deploy to Staging
      working-directory: ./infrastructure
      run: |
        npx cdk deploy --all \
          --context environment=staging \
          --require-approval never \
          --outputs-file cdk-outputs-staging.json
    
    - name: Run comprehensive tests
      run: |
        npm run test:smoke
        npm run test:integration
      env:
        API_ENDPOINT: ${{ steps.deploy.outputs.api-endpoint }}
        ENVIRONMENT: staging
    
    - name: Performance benchmark
      run: npm run test:benchmark
      env:
        API_ENDPOINT: ${{ steps.deploy.outputs.api-endpoint }}

  # ProductionÁí∞Â¢É„Éá„Éó„É≠„Ç§ÔºàÊâãÂãïÊâøË™çÂøÖÈ†àÔºâ
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: |
      success() && 
      (startsWith(github.ref, 'refs/tags/v') || inputs.environment == 'production')
    environment:
      name: production
      url: https://api.feature-flags.example.com
    
    steps:
    - name: Manual approval checkpoint
      run: |
        echo "üö® Production deployment requires manual approval"
        echo "Please review the staging deployment before proceeding"
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
    
    - name: Install CDK dependencies
      working-directory: ./infrastructure
      run: npm ci
    
    - name: Create backup snapshot
      run: |
        echo "Creating backup before production deployment..."
        # DynamoDB backup commands would go here
    
    - name: CDK Deploy to Production (Blue-Green)
      working-directory: ./infrastructure
      run: |
        npx cdk deploy --all \
          --context environment=production \
          --context deploymentStrategy=blue-green \
          --require-approval never \
          --outputs-file cdk-outputs-prod.json
    
    - name: Run production smoke tests
      run: npm run test:smoke:production
      env:
        API_ENDPOINT: ${{ steps.deploy.outputs.api-endpoint }}
        ENVIRONMENT: production
    
    - name: Monitor deployment health
      run: |
        echo "Monitoring deployment health for 5 minutes..."
        npm run monitor:health
      timeout-minutes: 5
    
    - name: Notify stakeholders
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: 'feature-flag-releases'
        SLACK_COLOR: good
        SLACK_MESSAGE: |
          üéâ Feature Flag System deployed to production successfully!
          
          üì¶ Version: ${{ github.ref_name }}
          üîó API: https://api.feature-flags.example.com
          üìä Dashboard: https://dashboard.feature-flags.example.com
        SLACK_TITLE: 'Production Deployment Complete'

  # „Éá„Éó„É≠„Ç§Âæå„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  post-deployment:
    name: Post-deployment Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          // Keep only the latest 5 artifacts
          const oldArtifacts = artifacts.artifacts.slice(5);
          
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          }
    
    - name: Update deployment status badge
      run: |
        echo "Updating deployment status..."
        # Logic to update status badge would go here

  # „É≠„Éº„É´„Éê„ÉÉ„ÇØÁî®„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÔºàÊâãÂãï„Éà„É™„Ç¨„ÉºÔºâ
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.environment != 'development'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Emergency rollback
      run: |
        echo "üö® Initiating emergency rollback..."
        # Rollback logic would go here
        # This could involve CDK rollback, Lambda alias switching, etc.
    
    - name: Notify emergency rollback
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: 'feature-flag-alerts'
        SLACK_COLOR: danger
        SLACK_MESSAGE: 'üö® Emergency rollback initiated for Feature Flag System'
        SLACK_TITLE: 'Emergency Rollback'