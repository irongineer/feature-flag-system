name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22.x'

jobs:
  # 基本的なコード品質チェック
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarQube analysis requires full history
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    # Build core package first for dependency resolution
    - name: Build core package
      run: cd packages/core && npm run build
    
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true
    
    - name: Run Prettier check
      run: npm run format:check
      continue-on-error: true
    
    - name: Run TypeScript compilation check
      run: npm run type-check

  # 単体テスト実行
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [core, sdk, api, cli]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    # Build core package first for dependency resolution
    - name: Build core package
      run: cd packages/core && npm run build
    
    - name: Run tests for ${{ matrix.package }}
      run: npm run test:${{ matrix.package }}
    
    - name: Generate coverage report
      run: npm run test:${{ matrix.package }}:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./packages/${{ matrix.package }}/coverage/lcov.info
        flags: ${{ matrix.package }}
        name: ${{ matrix.package }}-coverage
        fail_ci_if_error: false

  # パフォーマンステスト
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build packages
      run: npm run build
    
    - name: Run performance tests
      run: npm run poc:performance
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: poc/performance-report.txt

  # セキュリティ監査
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # CDK構文チェック
  cdk-validation:
    name: CDK Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install CDK dependencies
      working-directory: ./infrastructure
      run: npm ci
    
    - name: CDK Synthesize (dry-run)
      working-directory: ./infrastructure
      run: npx cdk synth --all
      env:
        AWS_DEFAULT_REGION: us-east-1
    
    - name: CDK Diff (if not main branch)
      if: github.ref != 'refs/heads/main'
      working-directory: ./infrastructure
      run: npx cdk diff --all || true
      env:
        AWS_DEFAULT_REGION: us-east-1

  # Docker イメージビルド（将来の拡張用）
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: false  # 現在はスキップ（将来のコンテナ化用）
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: feature-flag-system:latest

  # 統合テストの準備（将来の拡張用）
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: false  # 現在はスキップ（統合テスト実装後に有効化）
    
    services:
      dynamodb-local:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup DynamoDB tables
      run: npm run setup:test-db
      env:
        DYNAMODB_ENDPOINT: http://localhost:8000
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        DYNAMODB_ENDPOINT: http://localhost:8000

  # 全テスト完了後の通知
  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, performance-tests, security-audit, cdk-validation]
    if: always()
    
    steps:
    - name: Test Results
      run: |
        echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| CDK Validation | ${{ needs.cdk-validation.result }} |" >> $GITHUB_STEP_SUMMARY
    
    - name: Slack notification (if configured)
      if: failure() && github.ref == 'refs/heads/main'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: 'feature-flag-alerts'
        SLACK_COLOR: danger
        SLACK_MESSAGE: 'CI Pipeline failed on main branch'
        SLACK_TITLE: 'Feature Flag System CI Failure'